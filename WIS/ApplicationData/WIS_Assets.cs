//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WIS.ApplicationData
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Windows;
    using System.Windows.Media;

    public partial class WIS_Assets
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public WIS_Assets()
        {
            this.WIS_Asset_Disposals = new HashSet<WIS_Asset_Disposals>();
            this.WIS_Asset_Histories = new HashSet<WIS_Asset_Histories>();
            this.WIS_Requests = new HashSet<WIS_Requests>();
        }
    
        public int ID_asset { get; set; }
        public string asset_name { get; set; }
        public string asset_model { get; set; }
        public string asset_serial_number { get; set; }
        public int asset_type_ID { get; set; }
        public Nullable<System.DateTime> asset_purchase_date { get; set; }
        public Nullable<decimal> asset_purchase_price { get; set; }
        public Nullable<System.DateTime> asset_warranty_expiration_date { get; set; }
        public string asset_note { get; set; }
        public int asset_status_ID { get; set; }
        public Nullable<int> asset_location_ID { get; set; }
        public Nullable<int> asset_user_ID { get; set; }

        public string AssetImagePath => AssetImageHelper.GetImagePath(asset_type_ID);

        public string OwnerDisplay
        {
            get
            {
                if (WIS_Users != null)
                {
                    return $"{WIS_Users.user_firstname} {WIS_Users.user_lastname}";
                }
                return "Не установлено";
            }
        }

        public string PurchasePriceDisplay
        {
            get
            {
                if (asset_purchase_price.HasValue)
                    return asset_purchase_price.Value.ToString("C"); // Формат валюты
                else
                    return "Цена не указана";
            }
        }

        public string ModelAssetDisplay
        {
            get
            {
                if (!string.IsNullOrEmpty(asset_model))
                {
                    return asset_model;
                }
                else
                {
                    return "Модель не указана";
                }
            }
        }

        public string AssetNoteDisplay
        {
            get
            {
                if (!string.IsNullOrEmpty(asset_note))
                {
                    return asset_note;
                }
                else
                {
                    return "Комментарий отсутствует";
                }
            }
        }

        public string DisposalDateDisplay
        {
            get
            {
                var disposal = WIS_Asset_Disposals?.OrderByDescending(d => d.disposal_date).FirstOrDefault();
                if (disposal != null)
                {
                    return disposal.disposal_date.ToString("dd.MM.yyyy");
                }
                else
                {
                    return "Не списано";
                }
            }
        }

        public string LocationDisplay
        {
            get
            {
                if (WIS_Asset_Locations != null)
                {
                    return WIS_Asset_Locations.location_name;
                }
                return "Не установлено";
            }
        }

        [NotMapped]
        public DateTime? asset_disposal_date { get; set; }

        [NotMapped]
        public string asset_disposal_reason { get; set; }

        [NotMapped]
        public int? disposal_user_ID { get; set; }
        [NotMapped]
        public int? asset_responsible_user_ID { get; set; }
        [NotMapped]
        public string DisposalVisibilityFlag => WIS_Asset_Disposals.Any() ? "Visible" : "Collapsed";
        [NotMapped]
        public bool IsDisposed => WIS_Asset_Disposals?.Any() == true;
        [NotMapped]
        public bool HasPrice => asset_purchase_price.HasValue;

        [NotMapped]
        public bool HasLocation => WIS_Asset_Locations != null;

        [NotMapped]
        public Visibility PriceVisibility => HasPrice ? Visibility.Visible : Visibility.Collapsed;

        [NotMapped]
        public Visibility LocationVisibility => HasLocation ? Visibility.Visible : Visibility.Collapsed;
        [NotMapped]
        public Brush StatusColor
        {
            get
            {
                switch (asset_status_ID)
                {
                    case 1: return Brushes.Red;
                    case 2: return Brushes.Green;
                    case 3: return Brushes.Blue;
                    case 4: return Brushes.Yellow;
                    default: return Brushes.Black;
                }
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<WIS_Asset_Disposals> WIS_Asset_Disposals { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<WIS_Asset_Histories> WIS_Asset_Histories { get; set; }
        public virtual WIS_Asset_Locations WIS_Asset_Locations { get; set; }
        public virtual WIS_Asset_Statuses WIS_Asset_Statuses { get; set; }
        public virtual WIS_Asset_Types WIS_Asset_Types { get; set; }
        public virtual WIS_Users WIS_Users { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<WIS_Requests> WIS_Requests { get; set; }
    }
}
